/** 
 * Mutation `{{queryName endpoint}}`{{#if endpoint.summary}}
 * @summary {{addAsteriskAfterNewLine endpoint.summary}}{{/if}}{{#if endpoint.description}} 
 * @description {{addAsteriskAfterNewLine endpoint.description}}{{/if}}{{#if endpoint.acl}}
 * @permission Requires `{{abilityFunctionName endpoint}}` ability {{/if}}
{{#if (endpointParams endpoint)}}{{#each (endpointParams endpoint) as | endpointParam |}} * @param { {{endpointParam.type}} } mutation.{{endpointParam.name}} {{{endpointParamDescription endpointParam}}}
{{/each}}{{/if}} * @param { AppMutationOptions } options Mutation options
 * @statusCodes [{{commaSeparated endpoint.responseStatusCodes}}]
 */
export const {{queryName endpoint}} = (options?: AppMutationOptions<typeof {{importedEndpointName endpoint}}, { {{{genEndpointParams endpoint}}} }>) => {
  {{#if (endpointAllQueryKey endpoint endpoints)}} const queryClient = useQueryClient();{{/if}}

  return {{queryHook}}({
    mutationFn: ({{#if (endpointParams endpoint)}} { {{{endpointArgs endpoint}}} } {{/if}}) => {{importedEndpointName endpoint}}({{{endpointArgs endpoint}}}),
    ...options, {{#if (endpointAllQueryKey endpoint endpoints)}}
    onSuccess: (...args) => {
      if (options?.enableInvalidateAll) {
        queryClient.invalidateQueries({ queryKey: keys.{{endpointAllQueryKey endpoint endpoints}} });
      }
      options?.onSuccess?.(...args);
    },{{/if}}
  });
};