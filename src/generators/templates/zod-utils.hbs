{{! Zod import }}
{{{genImport zodImport}}}
{{! Error handling import }}
{{{genImport errorHandlingImport}}}

interface ParseOptions {
  type: "body" | "query";
  name?: string;
  errorHandler?: ErrorHandler<never>;
}

function is{{capitalize sortExp}}Valid(enumSchema: z.ZodEnum<[string, ...string[]]>, data?: string) {
  if (data === undefined || data === "" || enumSchema.options.length === 0) {
    return true;
  }

  const prefixedEnumOptions = `([+-]?(${enumSchema.options.join("|")}))`;
  const commaSeparatedOptions = `(${prefixedEnumOptions})(\s*,\s*${prefixedEnumOptions})*`;
  return new RegExp(`^${commaSeparatedOptions}$`).test(data);
}

export namespace {{zodUtilsNamespace}} {
  export function {{parse}}<T>(schema: z.ZodSchema<T>, data: unknown, { type, name, errorHandler }: ParseOptions = { type: "body" }) {
    try {
      return schema.parse(data);
    } catch (e) {
      if (e instanceof z.ZodError) {
        e.name = `FE Request ${type === "body" ? "body" : "query param"}${name ? ` ("${name}")` : ""} schema mismatch - ZodError`;
      }
      (errorHandler ?? {{sharedErrorHandler}}).rethrowError(e);
      throw e;
    }
  }

  export const {{sortExp}} = (enumSchema: z.ZodEnum<[string, ...string[]]>) =>
    z.string().superRefine((arg, ctx) => {
      if (!is{{capitalize sortExp}}Valid(enumSchema, arg)) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: "Invalid sorting string.",
        });
      }
    });

  {{#if branded}}
  export class ZodBranded<T extends z.ZodTypeAny, B extends string> extends z.ZodType<T["_output"], z.ZodTypeDef, T["_input"]> {
    readonly _schema: T;

    readonly _brand: B;

    constructor(_schema: T, _brand: B) {
      super(_schema._def);
      this._schema = _schema;
      this._brand = _brand;
    }

    _parse(input: z.ParseInput) {
      return this._schema._parse(input);
    }

    unwrap() {
      return this._schema;
    }
  }

  export function {{brand}}<T extends z.ZodTypeAny, B extends string>(schema: T, _brand: B): ZodBranded<T, B> {
    return new ZodBranded(schema, _brand);
  }
  {{/if}}
}
